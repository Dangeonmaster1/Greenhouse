// src/pages/GreenhouseDetail.jsx

import React, { useEffect, useState } from 'react';
import axios from 'axios';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
} from 'chart.js';
import { Line } from 'react-chartjs-2';

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

function GreenhouseDetail({ id }) {
    const [greenhouse, setGreenhouse] = useState(null);
    const [sensorData, setSensorData] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');

    useEffect(() => {
        async function fetchData() {
            try {
                const token = localStorage.getItem('token');

                // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–ø–ª–∏—Ü—É
                const ghResponse = await axios.get(`http://localhost:5000/api/greenhouses/${id}`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–æ–≤ —ç—Ç–æ–π —Ç–µ–ø–ª–∏—Ü—ã
                const dataResponse = await axios.get(`http://localhost:5000/api/sensor-data?greenhouse_id=${id}`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                setGreenhouse(ghResponse.data);
                setSensorData(dataResponse.data);
                setLoading(false);

            } catch (err) {
                console.error(err.message);
                setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
                setLoading(false);
            }
        }

        fetchData();
    }, [id]);

    if (loading) return <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>;
    if (error) return <p style={{ color: 'red' }}>{error}</p>;
    if (!greenhouse) return <p>–¢–µ–ø–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>;

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    const labels = sensorData.map(d => new Date(d.recorded_at).toLocaleString());

    const temperatureData = {
        labels,
        datasets: [
            {
                label: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)',
                data: sensorData.map(d => d.temperature),
                borderColor: 'rgba(255, 99, 132, 1)',
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                tension: 0.4,
                fill: true
            }
        ]
    };

    const airHumidityData = {
        labels,
        datasets: [
            {
                label: '–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ (%)',
                data: sensorData.map(d => d.air_humidity),
                borderColor: 'rgba(53, 162, 235, 1)',
                backgroundColor: 'rgba(53, 162, 235, 0.2)',
                tension: 0.4,
                fill: true
            }
        ]
    };

    const soilHumidityData = {
        labels,
        datasets: [
            {
                label: '–í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã (%)',
                data: sensorData.map(d => d.soil_humidity),
                borderColor: 'rgba(75, 192, 192, 1)',
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                tension: 0.4,
                fill: true
            }
        ]
    };

    const lightLevelData = {
        labels,
        datasets: [
            {
                label: '–û—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç—å (—É—Ä–æ–≤–µ–Ω—å)',
                data: sensorData.map(d => d.light_level),
                borderColor: 'rgba(255, 206, 86, 1)',
                backgroundColor: 'rgba(255, 206, 86, 0.2)',
                tension: 0.4,
                fill: true
            }
        ]
    };

    return (
        <div style={{ maxWidth: '800px', margin: 'auto' }}>
            <h2>{greenhouse.name}</h2>
            <p><strong>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</strong> {greenhouse.location || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</p>

            <h3>üìä –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</h3>
            <Line data={temperatureData} />

            <h3>üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞</h3>
            <Line data={airHumidityData} />

            <h3>üå± –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã</h3>
            <Line data={soilHumidityData} />

            <h3>‚òÄÔ∏è –û—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç—å</h3>
            <Line data={lightLevelData} />

            <hr />
            <a href="/dashboard">‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É</a>
        </div>
    );
}

export default function GHDetailPage(props) {
    const urlParams = new URLSearchParams(window.location.search);
    const greenhouseId = urlParams.get('id');

    if (!greenhouseId) {
        return (
            <div style={{ maxWidth: '400px', margin: 'auto' }}>
                <h2>‚ùå –û—à–∏–±–∫–∞</h2>
                <p>ID —Ç–µ–ø–ª–∏—Ü—ã –Ω–µ —É–∫–∞–∑–∞–Ω.</p>
                <a href="/dashboard">‚Üê –ö —Å–ø–∏—Å–∫—É —Ç–µ–ø–ª–∏—Ü</a>
            </div>
        );
    }

    return <GreenhouseDetail id={greenhouseId} />;
}